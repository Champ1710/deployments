trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SCANNER_HOME: $(SonarScanner)

jobs:
- job: BuildAndDeploy
  steps:
  - task: UseJava@1
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
  - task: UseNode@1
    inputs:
      versionSpec: '16.x'
  - task: SonarQubePrepare@5
    inputs:
      SonarQube: 'sonar-server'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'Netflix'
      cliProjectName: 'Netflix'
  - script: |
      git clone https://github.com/sachin2815/Netflix-clone-DevSecOps.git
    displayName: 'Checkout from Git'
  - script: |
      $(SCANNER_HOME)/bin/sonar-scanner
    displayName: 'SonarQube Analysis'
  - task: SonarQubeAnalyze@5
  - task: SonarQubePublish@5
    inputs:
      pollingTimeoutSec: '300'
  - script: |
      npm install
    displayName: 'Install Dependencies'
  - task: DependencyCheck@5
    inputs:
      scanPath: './'
      arguments: '--disableYarnAudit --disableNodeAudit'
  - script: |
      trivy fs . > trivyfs.txt
    displayName: 'Trivy FS Scan'
  - task: Docker@2
    inputs:
      containerRegistry: 'docker'
      repository: 'sachin2815/netflix'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      buildArguments: '--build-arg TMDB_V3_API_KEY=ca86fe14eca3e76864bc17f59d319b92'
      tags: 'latest'
  - script: |
      trivy image sachin2815/netflix:latest > trivyimage.txt
    displayName: 'Trivy Image Scan'
  - script: |
      docker run -d --name netflix -p 8081:80 sachin2815/netflix:latest
    displayName: 'Deploy to Container'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)'
      artifact: 'logs'
      publishLocation: 'pipeline'
  - task: Email@1
    inputs:
      subject: "'$(Build.BuildId)'"
      body: |
        Project: $(Build.DefinitionName)<br/>
        Build Number: $(Build.BuildId)<br/>
        URL: $(Build.BuildUri)<br/>
      to: 'sachin.singh.professional@gmail.com'
      attachments: 'trivyfs.txt,trivyimage.txt'
